name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Upload files to EC2
        run: |
          echo "$EC2_SSH_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem

          ssh -i ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "
            rm -rf /home/$EC2_USER/be-hotel-booking &&
            mkdir -p /home/$EC2_USER/be-hotel-booking
          "

          scp -i ec2_key.pem -o StrictHostKeyChecking=no -r . $EC2_USER@$EC2_HOST:/home/$EC2_USER/be-hotel-booking

      - name: Inject env vars and restart Docker
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST <<EOF
            cd /home/$EC2_USER/be-hotel-booking

            # Create .env dynamically
            echo "NODE_ENV=${NODE_ENV}" > .env
            echo "PORT=${PORT}" >> .env
            echo "MONGODB_URI=${MONGODB_URI}" >> .env
            echo "AWS_REGION=${AWS_REGION}" >> .env
            echo "ENABLE_CRON=${ENABLE_CRON}" >> .env
            echo "JWT_SECRET=${JWT_SECRET}" >> .env

            docker compose down
            docker compose up -d --build
          EOF
    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      NODE_ENV: ${{ secrets.NODE_ENV }}
      PORT: ${{ secrets.PORT }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ENABLE_CRON: ${{ secrets.ENABLE_CRON }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
